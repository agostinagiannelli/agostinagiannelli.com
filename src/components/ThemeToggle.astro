---
import SunIcon from "@/assets/icons/Sun.astro";
import MoonIcon from "@/assets/icons/Moon.astro";
import AutoIcon from "@/assets/icons/System.astro";

const THEMES = ["Light", "Dark", "Auto"];
---

<div class="relative mx-1">
  <button
    id="theme-toggle-btn"
    class="flex px-4 transition border-none appearance-none hover:scale-125"
  >
    <span class="sr-only">Choose theme</span>
    <SunIcon id="light" class="transition-all theme-toggle-icon size-5" />
    <MoonIcon
      id="dark"
      class="absolute transition-all theme-toggle-icon size-5"
    />
    <AutoIcon
      id="auto"
      class="absolute transition-all theme-toggle-icon size-5"
    />
  </button>
  <div
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-slate-100 bg-white/90 dark:bg-slate-900/90 dark:border-slate-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme: string) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:bg-slate-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  // Obtener preferencia del tema desde localStorage
  const getThemePreference = () => localStorage.getItem("theme") || "auto";

  // Aplicar el tema basado en la preferencia
  const applyTheme = () => {
    const theme = getThemePreference();
    const isDark =
      theme === "dark" ||
      (theme === "auto" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches);
    document.documentElement.classList.toggle("dark", isDark);
    document.querySelectorAll(".theme-toggle-icon").forEach((icon) => {
      icon.style.scale = icon.id === theme ? "1" : "0";
    });
  };

  // Función para abrir o cerrar el menú
  const toggleMenu = () => {
    const themesMenu = document.getElementById("themes-menu");
    themesMenu.classList.toggle("open");
  };

  document.addEventListener("astro:page-load", () => {
    applyTheme();

    const toggleBtn = document.getElementById("theme-toggle-btn");
    const themesMenu = document.getElementById("themes-menu");

    // Cerrar el menú si se hace clic fuera de él
    document.addEventListener("click", (e) => {
      if (!themesMenu.contains(e.target) && e.target !== toggleBtn) {
        themesMenu.classList.remove("open");
      }
    });

    // Abrir/cerrar el menú al hacer clic en el botón
    toggleBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleMenu();
    });

    // Manejar selección de tema
    document.querySelectorAll(".themes-menu-option").forEach((option) => {
      option.addEventListener("click", (e) => {
        const selectedTheme = e.target.innerText.toLowerCase().trim();
        localStorage.setItem("theme", selectedTheme);
        applyTheme();
        themesMenu.classList.remove("open");
      });
    });

    // Actualizar el tema automáticamente cuando cambia la preferencia del sistema
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", applyTheme);
  });
</script>
