---
import SunIcon from "./icons/Sun.astro";
import MoonIcon from "./icons/Moon.astro";
import AutoIcon from "./icons/System.astro";

const THEMES = ["Light", "Dark", "Auto"];
---

<div class="relative mx-1">
  <button
    id="theme-toggle-btn"
    class="flex px-4 transition border-none appearance-none hover:scale-125"
  >
    <span class="sr-only">Choose theme</span>
    <SunIcon id="light" class="transition-all theme-toggle-icon size-5" />
    <MoonIcon
      id="dark"
      class="absolute transition-all theme-toggle-icon size-5"
    />
    <AutoIcon
      id="auto"
      class="absolute transition-all theme-toggle-icon size-5"
    />
  </button>
  <div
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-slate-100 bg-white/90 dark:bg-slate-900/90 dark:border-slate-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-slate-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "auto";
    }
    return matchMedia.matches ? "dark" : "light";
  };

  const updateIcons = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  };

  const applyTheme = () => {
    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "auto" && matchMedia.matches);
    updateIcons(themePreference);
    document.documentElement.classList.toggle("dark", isDark);
  };

  matchMedia.addEventListener("change", applyTheme);
  applyTheme();

  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    themesMenu.classList.toggle("open");
  });

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
      applyTheme();
    });
  });
</script>
